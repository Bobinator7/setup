#!/usr/bin/python
#################################################################
##\file
#
# \note
#   Copyright (c) 2010 \n
#   Fraunhofer Institute for Manufacturing Engineering
#   and Automation (IPA) \n\n
#
#################################################################
#
# \note
#   Project name: care-o-bot
# \note
#   ROS stack name: setup
# \note
#   ROS package name: setup
#
# \author
#   Author: Florian Weisshardt, email:florian.weisshardt@ipa.fhg.de
# \author
#   Supervised by: Florian Weisshardt, email:florian.weisshardt@ipa.fhg.de
#
# \date Date of creation: Oct 2011
#
# \brief
#   Implements helper script for working with git and the care-o-bot stacks.
#
#################################################################
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer. \n
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution. \n
#     - Neither the name of the Fraunhofer Institute for Manufacturing
#       Engineering and Automation (IPA) nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission. \n
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License LGPL as 
# published by the Free Software Foundation, either version 3 of the 
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License LGPL for more details.
# 
# You should have received a copy of the GNU Lesser General Public 
# License LGPL along with this program. 
# If not, see <http://www.gnu.org/licenses/>.
#
#################################################################

import os
import sys
import shlex
import time
import platform
from optparse import OptionParser
import subprocess
import re
import socket
import getpass
import json

# Check for filesystem
if platform.system() == 'Linux':
	# write to log file instead of /dev/null
	_output = "/tmp/githelper/log.txt"
	# check if log file exists, if not create dir and file, if yes delete old file
	if not os.path.exists(os.path.dirname(_output)):
		os.makedirs(os.path.dirname(_output))
		os.system("touch " + _output)
	else:
		os.system("rm -r " + _output)
	
	# start new log with time information
	os.system("echo new log from " + time.strftime("%Y/%m/%d %H:%M:%S", time.localtime()) + " > " + _output + " 2>&1")

	# make logfile editable by everyone
	os.system("chmod a+rw -R " + _output)

elif platform.system() == 'Windows':
	_output = "nul"
else:
	_output = "/dev/null"

_usage = """usage: %prog [options] <command>

Commands:

%prog setup
  Once user has created an account on github.com, this sets up everything to get started working 

%prog fork -s STACK(s)
  Forks the given list (comma-separated) of github repositories from ipa320 to the user account on github

%prog clone [-s STACK(s), default=all stacks]
  Clones the given list (comma-separated) of repositories from github

%prog status [-s STACK(s), default=all stacks]
  Executes 'git status -uno' 

%prog pull [-s STACK(s), default=all stacks]
  Pulls latest changes from your origin master 

%prog push [-s STACK(s), default=all stacks]
  Pushes local commits to origin master 

%prog merge [-u GITHUBUSER, default="ipa320"] | [-s STACK(s), default=all stacks]
  Merges from a remote branch 
"""


## Main githelper script
#
# Parses arguments and starts helping. Everything is done regarding the local master branch
#TODO: check for latest version before executing command
def main():
	#print "main ..."
	parser = OptionParser(usage=_usage, prog=os.path.basename(sys.argv[0]))
	
	parser.add_option("-u", "--user",
		dest="githubuser", default="ipa320",
		help="Username on http://www.github.com. Default: ipa320")
	
	parser.add_option("-s", "--stacks",
		dest="stacks", metavar="STACK_NAMES_LIST,COMMA_SEPERATED", default="",
		help="Comma separated list of stacks to operate on. Default: all stacks in ~/git/care-o-bot")
	
	parser.add_option("-d", "--directory",
		dest="install_dir", default="~/git/care-o-bot",
		help="Installation directory of care-o-bot stacks. Default: ~/git/care-o-bot")
	
	(options, args) = parser.parse_args()

	# check for input parameters
	if len(args) == 0:
		parser.error("You must supply a command to githelper.")
	if len(args) != 1:
		parser.error("githelper only accepts a single command.")

	# start helping
	#print 'DEBUG: githelper starting with args %s, options %s'%(args, options)
	print ""

	if options.stacks == "":
		stacks = get_all_stacks(options)
	else:
		# convert comma separated string to list of stacks
		splitter = shlex.shlex(options.stacks, posix=True)
		splitter.whitespace += ','
		splitter.whitespace_split = True
		stacks = list(splitter)

	if args[0] == "setup":
		print 'githelper setup: helps you to set up everything to get started working with the Care-O-bot stacks on github\n'

		# github account exists?
		answer = raw_input("Do you have an account on github already? [<any key> / n] : ")
		if answer == 'n':
			print 'Please first create an account on github.com'
			print '(Suggestion: choose ipa-xyz as github user name, xyz being your IPA account name)'
			print 'Aborting...'
			sys.exit(1)

		# github user name
		github_user = subprocess.Popen('git config --global github.user', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].strip()
		if len(github_user) > 0:
			answer = raw_input('Is "' + github_user + '" your github user name? [<Return>=Yes; or enter another user name]: ')
			if len(answer) > 0:
				github_user = answer
		else:
			github_user = raw_input('Please enter your github user name: ')
		os.system('git config --global github.user ' + github_user + ' >> ' + _output + ' 2>&1') # store github user name in ~/.gitconfig

		# github password
		print 'Please enter your github password: '
		github_pw = getpass.getpass()
		
		# try authentication on github
		s = 'curl -u "' + github_user + ':' + github_pw + '" https://api.github.com'
		answer = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		m = re.search('Bad credentials', answer)
		if m:
			print 'Login on github failed; wrong password? - aborting.\n'
			sys.exit(1)
		else:
			print 'Login on github successful.\n'

		# github token:    ---- github seems to have removed tokens completely??? (token-based login has been deprecated)
		#buf = StringIO()
		#c = pycurl.Curl()
		#c.setopt(pycurl.URL, 'https://github.com/settings/admin')
		#c.setopt(pycurl.USERPWD, github_user + ':' + github_pw )
		#c.setopt(c.WRITEFUNCTION, buf.write)
		#c.perform()
		#c.close()

		#m = re.search('API token is <code>(.*)</code>', buf.getvalue()) 
		#buf.close()
		#if m:
		#	token = m.group(1)
		#	print 'Token is :' + token
		#	os.system('git config --global github.token ' + token)
		#else:
		#	print 'Could not fetch token from github.com; wrong password? - aborting.'
		#	sys.exit(1)
		
		# upload public ssh key to github (and if necessary, create it before that):
		if not(os.path.exists(os.path.expanduser('~/.ssh/id_rsa'))):
			answer = raw_input('No id_rsa key found; generate one? [<any key> (recommended) / n] : ')
			if answer == 'n':
				print 'Need ssh-key, aborting...'
				sys.exit(1)
			else:
				os.system('ssh-keygen -t rsa -f ~/.ssh/id_rsa')

		
		answer = raw_input('id_rsa key found in ~/.ssh/id_rsa; upload public key to github? [<any key> (recommended) / n] : ')
		if answer != 'n':
			rsaTitle = os.getlogin() + '@' + socket.gethostname()
			f = open(os.path.expanduser('~/.ssh/id_rsa.pub'), 'r')
			rsaKey = f.read().strip()
			f.close()
			tt = 'curl -i -H "Accept: application/json" -H "Content-Type: application/json" --user ' + github_user + ':' + github_pw + ' -X POST -d \'{"title":"' + rsaTitle + '","key":"' + rsaKey + '"}\' https://api.github.com/user/keys'
			output = subprocess.Popen(tt, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
			if re.search('Validation Failed', output):
				print 'Key upload was unsuccessful.'
				if re.search('key is already in use', output):
					print 'Key is already uploaded to github; aborting...'
				sys.exit(1)
			else:
				print 'Successfully uploaded the key ' + rsaTitle

		# curl https://github.com/settings/admin --user ipa-tys:xxx > test.txt

		# fork repositories:
		# curl https://api.github.com/repos/ipa320/setup/forks  (get forked repositories)
		# curl -u "ipa-tys:xxx" -X POST https://api.github.com/repos/ipa320/cob_navigation/forks  (fork a repository)
		# fork_answer = raw_input('Do you want to fork some repositories on github? [<any key> / n] : ')
		# if fork_answer == 'y':
		# 	stacksText = raw_input('Please enter the comma-separated list of stacks to fork: ')
		# 	stacksText = re.sub(r'\s+', '', stacksText)
		# 	stacks = stacksText.split(',')
		# 	for stack in stacks:
		# 		print "Forking " + stack
		# 		s = 'curl -u "' + github_user + ':' + github_pw + '" -X POST https://api.github.com/repos/ipa320/' + stack + '/forks'
		# 		os.system(s)
		
		# clone stacks:
		if fork_answer == 'y':
			answer = raw_input('Do you want to clone the forked repositories to the local machine (into ~/git/care-o-bot)? [<any key>/n] : ')
			if answer=='y':
				for stack in stacks:
					s = 'git clone git@github.com:' + github_user + '/' + stack
					os.system(s)


		# display info for user to be added to his ~/.bashrc file
		print "\n"
		print "Please update your ROS_PACKAGE_PATH to include ~/git/care-o-bot: Either run the following line"
		print "on each terminal or add the line at the end of your ~/.bashrc file and source it again."
		print ""
		print '    export ROS_PACKAGE_PATH=~/git/care-o-bot:$ROS_PACKAGE_PATH'
		print ""

	elif args[0] == "fork":
		print 'githelper fork: forks the given list of repositories\n'
		github_user = subprocess.Popen('git config --global github.user', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].strip()
		if len(github_user) > 0:
			answer = raw_input('Is "' + github_user + '" your github user name? [<Return>=Yes; or enter another user name]: ')
			if len(answer) > 0:
				github_user = answer
		else:
			github_user = raw_input('Please enter your github user name: ')
	
		# github password
		print 'Please enter your github password: '
		github_pw = getpass.getpass()

		# try authentication on github
		s = 'curl -u "' + github_user + ':' + github_pw + '" https://api.github.com'
		answer = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		m = re.search('Bad credentials', answer)
		if m:
			print 'Login on github failed; wrong password? - aborting.\n'
			sys.exit(1)
		else:
			print 'Login on github successful.\n'

		stacks = options.stacks.split(',')

		answer = subprocess.Popen('curl https://api.github.com/users/' + github_user + '/repos', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		repos = json.loads(answer)
		user_repositories = []
		for rep in repos:
			user_repositories.append(rep['name'])

		answer = subprocess.Popen('curl https://api.github.com/users/ipa320/repos', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		repos = json.loads(answer)
		ipa_repositories = []
		for rep in repos:
			ipa_repositories.append(rep['name'])
		
		not_in_ipa = set(stacks) - set(ipa_repositories)
		if len(not_in_ipa) > 0:
			print 'The following requested repositories are not available in ipa320 and will be ignored: ' + ', '.join(list(not_in_ipa))
			stacks = list( set(stacks) - not_in_ipa )
		
		already_forked = set(stacks) & set(user_repositories)
		if len(already_forked) > 0:
			print 'The following repositories are already forked from ipa320 to ' + github_user +  ' and will be ignored: ' + ', '.join(list(already_forked))
			stacks = list( set(stacks) - already_forked )

		print 'The following stacks will be forked now: ' + ','.join(stacks)
		if len(stacks)>0:
			clone = raw_input('Do you also want to clone these repositories to your local git account? [<any key> / n] : ')
		for stack in stacks:
			print stack
			s = 'curl -u "' + github_user + ':' + github_pw + '" -X POST https://api.github.com/repos/ipa320/' + stack + '/forks'
			subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
			if clone != 'n':
				s = 'git clone git@github.com:' + github_user + '/' + stack + ' ~/git/care-o-bot/' + stack
				subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
		print 'Done.'

	elif args[0] == "clone":
		print 'githelper clone: clones the given list of repositories\n'
		github_user = subprocess.Popen('git config --global github.user', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].strip()
		if len(github_user) > 0:
			answer = raw_input('Is "' + github_user + '" your github user name? [<Return>=Yes; or enter another user name]: ')
			if len(answer) > 0:
				github_user = answer
		else:
			github_user = raw_input('Please enter your github user name: ')
	
		# github password
		print 'Please enter your github password: '
		github_pw = getpass.getpass()

		# try authentication on github
		s = 'curl -u "' + github_user + ':' + github_pw + '" https://api.github.com'
		answer = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		m = re.search('Bad credentials', answer)
		if m:
			print 'Login on github failed; wrong password? - aborting.\n'
			sys.exit(1)
		else:
			print 'Login on github successful.\n'

		stacks = options.stacks.split(',')

		answer = subprocess.Popen('curl https://api.github.com/users/' + github_user + '/repos', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
		repos = json.loads(answer)
		github_stacks = []
		for rep in repos:
			github_stacks.append(rep['name'])

		not_on_github = set(stacks) - set(github_stacks)
		print 'The following repositories are not on on github and will be ignored: ' + ','.join(not_on_github)

		stacks = list( set(stacks) & set(github_stacks) )
		if len(stacks)==0:
			stacks = github_stacks
		print 'The following stacks will be cloned: ' + ','.join(stacks) + '\n'

		for stack in stacks:
			print stack
			s = 'git clone git@github.com:' + github_user + '/' + stack + ' ~/git/care-o-bot/' + stack
			answer = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
			if re.search('fatal', answer[1]):
				print 'Repository ' + stack + ' could not be cloned. git error message:'
				print answer[1] + '\n'
		print 'Done.\n'


# ./githelper fork -s blub,cob_command_tools,bla,cob_navigation,cob_manipulation,cob_common
# ./githelper clone -s, default

	else:
		# operate git command on selected stacks
		for stack in stacks:
			# change environment to stack path
			full_dir = os.path.expanduser(options.install_dir + "/" + stack)
			if not os.path.exists(full_dir):
				parser.error("selected stack " + stack + " not found in " + options.install_dir + ", aborting...")
				exit(1)
				
			# set working directory to stack directory
			os.chdir(full_dir)
			print "-------------------------------------------"
			print "==> operating on " + os.getcwd()
			print "-------------------------------------------"

			if args[0] == "status":
				write_to_log("status of stack " + stack + "...")
				git_status()
			elif args[0] == "pull":
				print "pulling..."
				write_to_log("pulling stack " + stack + "...")
				check_for_update()
				git_pull()
			elif args[0] == "push":
				print "pushing..."
				write_to_log("pushing stack " + stack + "...")
				check_for_update()
				git_push()
			elif args[0] == "merge":
				print "merging..."
				write_to_log("merging stack " + stack + "...")
				check_for_update()
				git_merge(stack, options)
			elif args[0] == "mergeto":
				print "merging to..."
				write_to_log("merging to for stack " + stack + "...")
				check_for_update()
				git_mergeto(stack, options)
			else:
				write_to_log("command \"" + args[0] + "\" not supported.")
				parser.error("command \"" + args[0] + "\" not supported.")
			print "...done."
			write_to_log("...done")
			print ""
			write_to_log("")




def write_to_log(message):
	os.system("echo " + message + " >> " + _output + " 2>&1")


def git_status():
	#print "git_status ... "
	os.system("git status -uno")


def git_pull():
	#print "git_pull ... "
	# check for uncommited changes
	check_for_changes()
	
	# operate on master branch
	os.system("git checkout master >> " + _output + " 2>&1")

	# fetch from origin
	os.system("git fetch origin >> " + _output + " 2>&1")
	
	# merge own origin/master
	os.system("git merge origin/master >> " + _output)
	if has_conflicts():
		print "ERROR: Conflicts found. Please pull manually and resolve conflicts! Resetting changes and aborting..."
		os.system("git reset --hard HEAD")
		exit(1)


def git_push():
	#print "git_push ... "
	# first pull from origin master
	git_pull()

	# push to origin master
	os.system("git push origin master >> " + _output + " 2>&1")


def git_merge(stack, options):
	#print "git_merge ... "
	git_push()

	# create remote origin if not exists
	p = os.popen("git remote")
	status = p.read()
	p.close()
	if status.count("origin-" + options.githubuser) <= 0:
		os.system("git remote add origin-" + options.githubuser + " git@github.com:" + options.githubuser + "/" + stack + ".git")

	# change to automerge branch
	os.system("git checkout -b automerge >> " + _output + " 2>&1")
	
	# fetch from origin-githubuser and merge and push
	os.system("git fetch origin-" + options.githubuser + " >> " + _output + " 2>&1")
	os.system("git merge origin-" + options.githubuser + "/master >> " + _output + " 2>&1")
	if has_conflicts():
		print "ERROR: conflicts found. Please merge manually and resolve conflicts! Resetting changes and aborting..."
		os.system("git reset --hard HEAD >> " + _output + " 2>&1")
		os.system("git checkout master >> " + _output + " 2>&1")
		os.system("git branch -D automerge >> " + _output + " 2>&1")
		exit(1)
	
	os.system("git checkout master >> " + _output + " 2>&1")
	os.system("git merge automerge >> " + _output + " 2>&1")
	os.system("git branch -D automerge >> " + _output + " 2>&1")
	git_push()

def git_mergeto(stack, options):
	#print "git_mergeto ... "
	git_merge(stack, options)
	os.system("git push origin-" + options.githubuser + " master >> " + _output + " 2>&1")

def check_for_update():#TODO check for new version, use timeout if no internet connection available
	#print "check_for_update ... "
	#print "There is a new version of githelper available. Please use the following commands to update:\n"
	#print "wget http://www.github.com/ipa320/setup... "
	#print "chmod +x githelper"
	pass
	

## returns a list of all stacks in options.install_dir
def get_all_stacks(options):
	#print "get_all_stacks ..."
	# get all directories
	dirs = os.walk(os.path.expanduser(options.install_dir)).next()[1]
	
	# check if directory is a stack
	stacks = []
	for directory in dirs:
		if os.path.exists(os.path.expanduser(options.install_dir) + "/" + directory + "/stack.xml"):
			#print "directory, "is a stack"
			stacks.append(directory)
		else:
			#print directory, "is not a stack"
			pass
	return stacks


## checks for uncommited changes
def check_for_changes():
	#print "check_for_changes ..."
	p = os.popen('git status -uno --porcelain')
	status = p.read()
	p.close()
	if status != "":
		print "ERROR: found local changes in " + os.getcwd() + ": please commit or reset them first before continuing, aborting..."
		print "Status: \n" + status
		exit(1)


## check if a merge is conflicting
def has_conflicts():
	#print "has_conflicts ..."
	p = os.popen("git status -uno")
	status = p.read()
	p.close()
	
	if status.count("Unmerged paths") <= 0:
		# no conflict found
		return False
	else: 
		# conflict found
		return True
	


## Main routine for running the githelper script
#
if __name__ == '__main__':
	main()
